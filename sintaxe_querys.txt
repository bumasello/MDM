-- q_recupDataPacCursorDtl --------------------------------------------------------------------------------------
Faz uma chamada ao banco acionando as procedures que populam as STG de cada HIS.

CHAMADA:
BEGIN
recupDataPacCursorBanguDtl();
recupDataPacCursorCaxiasDtl();
recupDataPacCursorNiteroiDtl();
recupDataPacCursorGloriaDtl();
END;

Sintaxe query: 
CREATE OR REPLACE NONEDITIONABLE PROCEDURE recupDataPacCursorBanguDtl AS
  CURSOR cur_dados IS
    SELECT CD_PRONTUARIO, NM_PACIENTE, NM_MAE, NM_PAI, DT_NASCIMENTO, CD_SEXO, NR_CPF,
           nm_lgr_end_residencial, nr_end_residencial, nm_brro_end_residencial,
           nm_cid_end_residencial, cep_end_residencial, nr_tel_residencial,
           nr_tel_celular, nr_tel_comercial, dt_abrt_prontuario, ds_email,
           bip, dt_pcm_cdd, flag_prc_para_bip
    FROM hospital_bangu@hospital_bangu_dtl;

  -- Declaração de variáveis para armazenar os valores do cursor
  variavel1 stg_paciente_bangu.CD_PRONTUARIO%TYPE;
  variavel2 stg_paciente_bangu.NM_PACIENTE%TYPE;
  variavel3 stg_paciente_bangu.NM_MAE%TYPE;
  variavel4 stg_paciente_bangu.NM_PAI%TYPE;
  variavel5 stg_paciente_bangu.DT_NASCIMENTO%TYPE;
  variavel6 stg_paciente_bangu.CD_SEXO%TYPE;
  variavel7 stg_paciente_bangu.NR_CPF%TYPE;
  variavel8 stg_paciente_bangu.nm_lgr_end_residencial%TYPE;
  variavel9 stg_paciente_bangu.nr_end_residencial%TYPE;
  variavel10 stg_paciente_bangu.nm_brro_end_residencial%TYPE;
  variavel11 stg_paciente_bangu.nm_cid_end_residencial%TYPE;
  variavel12 stg_paciente_bangu.cep_end_residencial%TYPE;
  variavel13 stg_paciente_bangu.nr_tel_residencial%TYPE;
  variavel14 stg_paciente_bangu.nr_tel_celular%TYPE;
  variavel15 stg_paciente_bangu.nr_tel_comercial%TYPE;
  variavel16 stg_paciente_bangu.dt_abrt_prontuario%TYPE;
  variavel17 stg_paciente_bangu.ds_email%TYPE;
  variavel18 stg_paciente_bangu.bip%TYPE;
  variavel19 stg_paciente_bangu.dt_pcm_cdd%TYPE;
  variavel20 stg_paciente_bangu.flag_prc_para_bip%TYPE;
BEGIN
  -- Abrir o cursor
  OPEN cur_dados;

  -- Loop para percorrer os dados do cursor
  LOOP
    FETCH cur_dados INTO 
    variavel1, 
    variavel2, 
    variavel3, 
    variavel4, 
    variavel5, 
    variavel6, 
    variavel7,
    variavel8, 
    variavel9, 
    variavel10, 
    variavel11, 
    variavel12, 
    variavel13, 
    variavel14,
    variavel15,
    variavel16,
    variavel17,
    variavel18,
    variavel19,
    variavel20;
    EXIT WHEN cur_dados%NOTFOUND;

    -- Inserir os dados na tabela stg_paciente_bangu
    INSERT INTO stg_paciente_bangu (
    CD_PRONTUARIO, 
    NM_PACIENTE, 
    NM_MAE, 
    NM_PAI, 
    DT_NASCIMENTO, 
    CD_SEXO, 
    NR_CPF, 
    nm_lgr_end_residencial, 
    nr_end_residencial, 
    nm_brro_end_residencial,
    nm_cid_end_residencial,
    cep_end_residencial,
    nr_tel_residencial,
    nr_tel_celular,
    nr_tel_comercial,
    dt_abrt_prontuario,
    ds_email,
    bip,
    dt_pcm_cdd,
    flag_prc_para_bip)
    VALUES (
    variavel1, 
    variavel2, 
    variavel3, 
    variavel4, 
    variavel5, 
    variavel6, 
    variavel7,
    variavel8,
    variavel9,
    variavel10,
    variavel11, 
    variavel12, 
    variavel13, 
    variavel14, 
    variavel15, 
    variavel16, 
    variavel17,
    variavel18,
    variavel19,
    variavel20);
  END LOOP;

  -- Fechar o cursor
  CLOSE cur_dados;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
END;

-- q_log_controle_inicio (Rdp / Pbp) -----------------------------------------------------------------------------------
Fica responsável por logar o inicio das querys nos bancos de controle do MDM.

CHAMADA: 
BEGIN
log_controle_mdm_inicio('recupDataPac');
END;

Sintaxe query:
CREATE OR REPLACE PROCEDURE LOG_CONTROLE_MDM_INICIO(
  p_nm_carga IN VARCHAR2
) AS
BEGIN
  INSERT INTO controle_mdm_inicio (id_carga, dt_inicio, nm_carga)
  VALUES (seq_id_carga.NEXTVAL, SYSDATE, p_nm_carga);
  COMMIT;
END;
/

-- q_log_controle_fim (Rdp / Pbp) -----------------------------------------------------------------------------------
Fica responsável por logar o fim das querys nos bancos de controle do MDM.

CHAMADA:
BEGIN
log_controle_mdm_fim('recupDataPac');
END;

Sintaxe query:
CREATE OR REPLACE PROCEDURE LOG_CONTROLE_MDM_FIM(
  p_nm_carga IN VARCHAR2
) AS
  v_id_carga_inicio controle_mdm_inicio.id_carga%TYPE;
BEGIN
  SELECT MAX(id_carga) INTO v_id_carga_inicio
  FROM controle_mdm_inicio
  WHERE nm_carga = p_nm_carga;

  INSERT INTO controle_mdm_fim (id_carga, dt_fim, nm_carga, id_carga_inicio)
  VALUES (seq_id_carga.NEXTVAL, SYSDATE, p_nm_carga, v_id_carga_inicio);
  COMMIT;
END;
/

-- q_populaBipPac -----------------------------------------------------------------------------------
Fica responsável por criar e popular a camada BIP do banco

CHAMADA:
BEGIN
popula_bip_pes_doc_pad();
popula_bip_pes();
popula_bip_pes_ctt_elet();
popula_bip_pes_end();
popula_bip_pes_tel();
END;

Sintaxe query:

1 ETAPA - POPULA_BIP_PES_DOC_PAD -----------------------------------------------------------
create or replace NONEDITIONABLE PROCEDURE popula_bip_pes_doc_pad AS
BEGIN
  -- Inserir dados da tabela STG_PACIENTE_BANGU
  INSERT INTO bip_pes_doc_pad (id_bip_pes, nr_cpf, dt_atu_bip_pes)
  SELECT seq_bip_pes.NEXTVAL, nr_cpf, SYSDATE
  FROM STG_PACIENTE_BANGU;

  -- Inserir dados da tabela STG_PACIENTE_CAXIAS
  INSERT INTO bip_pes_doc_pad (id_bip_pes, nr_cpf, dt_atu_bip_pes)
  SELECT seq_bip_pes.NEXTVAL, nr_cpf, SYSDATE
  FROM STG_PACIENTE_CAXIAS;

  -- Inserir dados da tabela STG_PACIENTE_GLORIA
  INSERT INTO bip_pes_doc_pad (id_bip_pes, nr_cpf, dt_atu_bip_pes)
  SELECT seq_bip_pes.NEXTVAL, nr_cpf, SYSDATE
  FROM STG_PACIENTE_GLORIA;

  -- Inserir dados da tabela STG_PACIENTE_NITEROI
  INSERT INTO bip_pes_doc_pad (id_bip_pes, nr_cpf, dt_atu_bip_pes)
  SELECT seq_bip_pes.NEXTVAL, nr_cpf, SYSDATE
  FROM STG_PACIENTE_NITEROI;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END; 

2 ETAPA - POPULA_BIP_PES -----------------------------------------------------------

create or replace NONEDITIONABLE PROCEDURE popula_bip_pes AS
BEGIN
  FOR rec IN (SELECT id_bip_pes, nr_cpf FROM bip_pes_doc_pad)
  LOOP
    INSERT INTO bip_pes (id_bip_pes, nm_pes, dt_cad_bip_pes, dt_atu_bip_pes)
    SELECT rec.id_bip_pes, p.nm_paciente, SYSDATE, SYSDATE
    FROM stg_paciente_bangu p
    WHERE p.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes (id_bip_pes, nm_pes, dt_cad_bip_pes, dt_atu_bip_pes)
    SELECT rec.id_bip_pes, c.nm_paciente, SYSDATE, SYSDATE
    FROM stg_paciente_caxias c
    WHERE c.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes (id_bip_pes, nm_pes, dt_cad_bip_pes, dt_atu_bip_pes)
    SELECT rec.id_bip_pes, n.nm_paciente, SYSDATE, SYSDATE
    FROM stg_paciente_niteroi n
    WHERE n.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes (id_bip_pes, nm_pes, dt_cad_bip_pes, dt_atu_bip_pes)
    SELECT rec.id_bip_pes, g.nm_paciente, SYSDATE, SYSDATE
    FROM stg_paciente_gloria g
    WHERE g.nr_cpf = rec.nr_cpf;
  END LOOP;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END;

3 ETAPA - POPULA_BIP_PES_CTT_ELET -------------------------------------------------

create or replace NONEDITIONABLE PROCEDURE popula_bip_pes_ctt_elet AS
BEGIN
  FOR rec IN (SELECT id_bip_pes, nr_cpf FROM bip_pes_doc_pad)
  LOOP
    INSERT INTO bip_pes_ctt_elet (id_bip_pes_ctt_elet, id_bip_pes, tx_ctt_elet, dt_cad_bip_ctt_elet, dt_atu_bip_pes_ctt_elet)
    SELECT seq_bip_pes_ctt_elet.NEXTVAL, rec.id_bip_pes, p.ds_email, SYSDATE, SYSDATE
    FROM stg_paciente_bangu p
    WHERE p.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes_ctt_elet (id_bip_pes_ctt_elet, id_bip_pes, tx_ctt_elet, dt_cad_bip_ctt_elet, dt_atu_bip_pes_ctt_elet)
    SELECT seq_bip_pes_ctt_elet.NEXTVAL, rec.id_bip_pes, c.ds_email, SYSDATE, SYSDATE
    FROM stg_paciente_caxias c
    WHERE c.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes_ctt_elet (id_bip_pes_ctt_elet, id_bip_pes, tx_ctt_elet, dt_cad_bip_ctt_elet, dt_atu_bip_pes_ctt_elet)
    SELECT seq_bip_pes_ctt_elet.NEXTVAL, rec.id_bip_pes, n.ds_email, SYSDATE, SYSDATE
    FROM stg_paciente_niteroi n
    WHERE n.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes_ctt_elet (id_bip_pes_ctt_elet, id_bip_pes, tx_ctt_elet, dt_cad_bip_ctt_elet, dt_atu_bip_pes_ctt_elet)
    SELECT seq_bip_pes_ctt_elet.NEXTVAL, rec.id_bip_pes, g.ds_email, SYSDATE, SYSDATE
    FROM stg_paciente_gloria g
    WHERE g.nr_cpf = rec.nr_cpf;
  END LOOP;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END;

4 ETAPA - POPULA_BIP_PES_END -------------------------------------------------------

create or replace NONEDITIONABLE PROCEDURE popula_bip_pes_end AS
BEGIN
  FOR rec IN (SELECT id_bip_pes, nr_cpf FROM bip_pes_doc_pad)
  LOOP
    INSERT INTO bip_pes_end (id_bip_pes_end, id_bip_pes, nm_lgd, nr_lgd, nm_brro, nr_cep, dt_cad_bip_pes_end, dt_atu_bip_pes_end)
    SELECT seq_bip_pes_end.NEXTVAL, rec.id_bip_pes, p.nm_lgr_end_residencial, p.nr_end_residencial, p.nm_brro_end_residencial, p.cep_end_residencial, SYSDATE, SYSDATE
    FROM stg_paciente_bangu p
    WHERE p.nr_cpf = rec.nr_cpf;

    INSERT INTO bip_pes_end (id_bip_pes_end, id_bip_pes, nm_lgd, nr_lgd, nm_brro, nr_cep, dt_cad_bip_pes_end, dt_atu_bip_pes_end)
    SELECT seq_bip_pes_end.NEXTVAL, rec.id_bip_pes, c.nm_lgr_end_residencial, c.nr_end_residencial, c.nm_brro_end_residencial, c.cep_end_residencial, SYSDATE, SYSDATE
    FROM stg_paciente_caxias c
    WHERE c.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes_end (id_bip_pes_end, id_bip_pes, nm_lgd, nr_lgd, nm_brro, nr_cep, dt_cad_bip_pes_end, dt_atu_bip_pes_end)
    SELECT seq_bip_pes_end.NEXTVAL, rec.id_bip_pes, n.nm_lgr_end_residencial, n.nr_end_residencial, n.nm_brro_end_residencial, n.cep_end_residencial, SYSDATE, SYSDATE
    FROM stg_paciente_niteroi n
    WHERE n.nr_cpf = rec.nr_cpf;
    
    INSERT INTO bip_pes_end (id_bip_pes_end, id_bip_pes, nm_lgd, nr_lgd, nm_brro, nr_cep, dt_cad_bip_pes_end, dt_atu_bip_pes_end)
    SELECT seq_bip_pes_end.NEXTVAL, rec.id_bip_pes, g.nm_lgr_end_residencial, g.nr_end_residencial, g.nm_brro_end_residencial, g.cep_end_residencial, SYSDATE, SYSDATE
    FROM stg_paciente_gloria g
    WHERE g.nr_cpf = rec.nr_cpf;
  END LOOP;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END;

5 ETAPA - POPULA_BIP_PES_TEL ------------------------------------------------------

create or replace NONEDITIONABLE PROCEDURE popula_bip_pes_tel AS
BEGIN
  FOR rec IN (SELECT id_bip_pes, nr_cpf FROM bip_pes_doc_pad)
  LOOP
    INSERT INTO bip_pes_tel (id_bip_pes_tel, id_bip_pes, cd_ddd, cd_ddi, nr_tel, dt_cad_bip_pes_tel, dt_atu_bip_pes_tel)
    SELECT seq_bip_pes_tel.NEXTVAL, rec.id_bip_pes, null, null, p.nr_tel_celular, SYSDATE, SYSDATE
    FROM stg_paciente_bangu p
    WHERE p.nr_cpf = rec.nr_cpf;

    INSERT INTO bip_pes_tel (id_bip_pes_tel, id_bip_pes, cd_ddd, cd_ddi, nr_tel, dt_cad_bip_pes_tel, dt_atu_bip_pes_tel)
    SELECT seq_bip_pes_tel.NEXTVAL, rec.id_bip_pes, null, null, c.nr_tel_celular, SYSDATE, SYSDATE
    FROM stg_paciente_caxias c
    WHERE c.nr_cpf = rec.nr_cpf;

    INSERT INTO bip_pes_tel (id_bip_pes_tel, id_bip_pes, cd_ddd, cd_ddi, nr_tel, dt_cad_bip_pes_tel, dt_atu_bip_pes_tel)
    SELECT seq_bip_pes_tel.NEXTVAL, rec.id_bip_pes, null, null, n.nr_tel_celular, SYSDATE, SYSDATE
    FROM stg_paciente_niteroi n
    WHERE n.nr_cpf = rec.nr_cpf;

    INSERT INTO bip_pes_tel (id_bip_pes_tel, id_bip_pes, cd_ddd, cd_ddi, nr_tel, dt_cad_bip_pes_tel, dt_atu_bip_pes_tel)
    SELECT seq_bip_pes_tel.NEXTVAL, rec.id_bip_pes, null, null, g.nr_tel_celular, SYSDATE, SYSDATE
    FROM stg_paciente_gloria g
    WHERE g.nr_cpf = rec.nr_cpf;
  END LOOP;

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END;


-- q_processa_cura_inv ---------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE processar_cura_inv AS
BEGIN
  -- Inserir os registros com FLAG ID_PROCESSAR = 'S' na tabela cura_inv
  INSERT INTO cura_inv (id_prt_pes, cpf, nome, end, tel)
  SELECT
    prt_pes_doc_pad.id_prt_pes,
    prt_pes_doc_pad.nr_cpf,
    prt_pes.nm_pes,
    prt_pes_end.nm_lgd,
    prt_pes_tel.nr_tel
  FROM
    prt_pes_doc_pad
    JOIN prt_pes ON prt_pes_doc_pad.id_prt_pes = prt_pes.id_prt_pes
    JOIN prt_pes_end ON prt_pes_doc_pad.id_prt_pes = prt_pes_end.id_prt_pes
    JOIN prt_pes_tel ON prt_pes_doc_pad.id_prt_pes = prt_pes_tel.id_prt_pes
  WHERE
    prt_pes_doc_pad.id_processar = 'S';

  COMMIT; -- Comitar as mudanças para o banco
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK; -- Em caso de erro, desfazer as mudanças
    RAISE;    -- Re-lançar a exceção para tratamento externo, se necessário
END;
/
